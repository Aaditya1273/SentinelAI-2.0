name: SentinelAI 4.0 CI/CD Pipeline

# Optional Secrets Configuration:
# - SNYK_TOKEN: For enhanced security scanning (optional)
# - MAINNET_PRIVATE_KEY: For mainnet contract deployment (optional)
# - ALCHEMY_API_KEY: For Ethereum mainnet access (optional)
# - SLACK_WEBHOOK: For deployment notifications (optional)
# - LHCI_GITHUB_APP_TOKEN: For Lighthouse CI performance testing (optional)
# - CODECOV_TOKEN: For code coverage reporting (optional)

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main ]

env:
  NODE_VERSION: '20'
  REGISTRY: ghcr.io
  IMAGE_NAME: ${{ github.repository }}

jobs:
  test:
    name: Run Tests
    runs-on: ubuntu-latest
    
    services:
      postgres:
        image: postgres:15
        env:
          POSTGRES_PASSWORD: postgres
          POSTGRES_DB: sentinelai_test
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 5432:5432
      
      redis:
        image: redis:7
        options: >-
          --health-cmd "redis-cli ping"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 6379:6379

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: ${{ env.NODE_VERSION }}
        cache: 'npm'

    - name: Install dependencies
      run: npm ci --legacy-peer-deps

    - name: Install Circom
      run: |
        wget https://github.com/iden3/circom/releases/latest/download/circom-linux-amd64
        chmod +x circom-linux-amd64
        sudo mv circom-linux-amd64 /usr/local/bin/circom

    - name: Compile ZK Circuits
      run: npm run compile-circuits

    - name: Run linting
      run: npm run lint

    - name: Run type checking
      run: npx tsc --noEmit

    - name: Run unit tests
      run: npm test
      env:
        DATABASE_URL: postgresql://postgres:postgres@localhost:5432/sentinelai_test
        REDIS_URL: redis://localhost:6379
        NODE_ENV: test

    - name: Generate test coverage
      run: npm run test -- --coverage

    - name: Upload coverage to Codecov
      uses: codecov/codecov-action@v3
      with:
        file: ./coverage/lcov.info
        flags: unittests
        name: codecov-umbrella

  security:
    name: Security Audit
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: ${{ env.NODE_VERSION }}
        cache: 'npm'

    - name: Install dependencies
      run: npm ci --legacy-peer-deps

    - name: Run security audit
      run: npm audit --audit-level moderate

    - name: Check Snyk Token
      id: check-snyk
      run: |
        if [ -n "${{ secrets.SNYK_TOKEN }}" ]; then
          echo "snyk-available=true" >> $GITHUB_OUTPUT
        else
          echo "snyk-available=false" >> $GITHUB_OUTPUT
          echo "⚠️ SNYK_TOKEN not configured - skipping enhanced security scan"
        fi

    - name: Run Snyk security scan
      if: steps.check-snyk.outputs.snyk-available == 'true'
      uses: snyk/actions/node@master
      continue-on-error: true
      env:
        SNYK_TOKEN: ${{ secrets.SNYK_TOKEN }}
      with:
        args: --severity-threshold=high

  smart-contracts:
    name: Smart Contract Tests
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: ${{ env.NODE_VERSION }}
        cache: 'npm'

    - name: Install dependencies
      run: npm ci --legacy-peer-deps

    - name: Compile contracts
      run: npx hardhat compile

    - name: Run contract tests
      run: npx hardhat test

    - name: Run gas reporter
      run: npx hardhat test --reporter gas-reporter

    - name: Generate coverage report
      run: npx hardhat coverage

  build:
    name: Build Application
    runs-on: ubuntu-latest
    needs: [test, security, smart-contracts]
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: ${{ env.NODE_VERSION }}
        cache: 'npm'

    - name: Install dependencies
      run: npm ci --legacy-peer-deps

    - name: Build application
      run: npm run build
      env:
        NEXT_TELEMETRY_DISABLED: 1

    - name: Upload build artifacts
      uses: actions/upload-artifact@v3
      with:
        name: build-files
        path: |
          .next/
          public/
          package.json

  docker:
    name: Build and Push Docker Image
    runs-on: ubuntu-latest
    needs: build
    if: github.event_name == 'push' && github.ref == 'refs/heads/main'
    
    permissions:
      contents: read
      packages: write

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3

    - name: Log in to Container Registry
      uses: docker/login-action@v3
      with:
        registry: ${{ env.REGISTRY }}
        username: ${{ github.actor }}
        password: ${{ secrets.GITHUB_TOKEN }}

    - name: Extract metadata
      id: meta
      uses: docker/metadata-action@v5
      with:
        images: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}
        tags: |
          type=ref,event=branch
          type=ref,event=pr
          type=sha,prefix={{branch}}-
          type=raw,value=latest,enable={{is_default_branch}}

    - name: Build and push Docker image
      uses: docker/build-push-action@v5
      with:
        context: .
        platforms: linux/amd64,linux/arm64
        push: true
        tags: ${{ steps.meta.outputs.tags }}
        labels: ${{ steps.meta.outputs.labels }}
        cache-from: type=gha
        cache-to: type=gha,mode=max

  deploy-staging:
    name: Deploy to Staging
    runs-on: ubuntu-latest
    needs: docker
    if: github.ref == 'refs/heads/develop'
    environment: staging
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Deploy to staging
      run: |
        echo "Deploying to staging environment..."
        # Add your staging deployment commands here
        # Example: kubectl apply -f k8s/staging/
        
    - name: Run integration tests
      run: |
        echo "Running integration tests against staging..."
        # Add integration test commands here

  deploy-production:
    name: Deploy to Production
    runs-on: ubuntu-latest
    needs: docker
    if: github.ref == 'refs/heads/main'
    environment: production
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: ${{ env.NODE_VERSION }}
        cache: 'npm'

    - name: Install dependencies
      run: npm ci --legacy-peer-deps

    - name: Deploy contracts to mainnet
      continue-on-error: true
      run: |
        if [ -n "$PRIVATE_KEY" ] && [ -n "$ALCHEMY_API_KEY" ]; then
          npx hardhat run scripts/deploy.js --network mainnet
        else
          echo "Skipping mainnet deployment - secrets not configured"
        fi
      env:
        # Optional: Configure these secrets for mainnet deployment
        PRIVATE_KEY: ${{ secrets.MAINNET_PRIVATE_KEY || '' }}
        ALCHEMY_API_KEY: ${{ secrets.ALCHEMY_API_KEY || '' }}

    - name: Deploy to production
      run: |
        echo "Deploying to production environment..."
        # Add your production deployment commands here
        # Example: kubectl apply -f k8s/production/

    - name: Run smoke tests
      run: |
        echo "Running smoke tests against production..."
        # Add smoke test commands here

    - name: Notify deployment
      uses: 8398a7/action-slack@v3
      if: always()
      continue-on-error: true
      # Optional: Configure SLACK_WEBHOOK secret for deployment notifications
      with:
        status: ${{ job.status }}
        channel: '#deployments'
        webhook_url: ${{ secrets.SLACK_WEBHOOK || '' }}

  performance:
    name: Performance Tests
    runs-on: ubuntu-latest
    needs: build
    if: github.event_name == 'push' && github.ref == 'refs/heads/main'
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: ${{ env.NODE_VERSION }}
        cache: 'npm'

    - name: Install dependencies
      run: npm ci --legacy-peer-deps

    - name: Run Lighthouse CI
      continue-on-error: true
      run: |
        if [ -n "$LHCI_GITHUB_APP_TOKEN" ]; then
          npm install -g @lhci/cli@0.12.x
          lhci autorun
        else
          echo "Skipping Lighthouse CI - LHCI_GITHUB_APP_TOKEN not configured"
        fi
      env:
        # Optional: Configure LHCI_GITHUB_APP_TOKEN secret for Lighthouse CI
        LHCI_GITHUB_APP_TOKEN: ${{ secrets.LHCI_GITHUB_APP_TOKEN || '' }}

    - name: Run load tests
      run: |
        echo "Running load tests..."
        # Add load testing commands here
        # Example: artillery run load-test.yml
